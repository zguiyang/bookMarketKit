---
description: 
globs: apps/backend/**/*.ts
alwaysApply: false
---
# 后端开发规范

## 技术栈概览

我们的后端应用基于以下核心技术栈构建：

- **框架**：Fastify.js
- **数据库**：MongoDB
- **ODM**：mongoose
- **缓存**：Redis
- **认证**：JWT（fastify-jwt）
- **验证**：zod（推荐）或 ajv
- **API文档**：OpenAPI/Swagger（fastify-swagger）

## 目录结构规范

```
src/
├── plugins/                 # Fastify 插件（如数据库、redis、jwt等）
│   ├── db.ts                # MongoDB 连接与挂载
│   ├── redis.ts             # Redis 客户端
│   └── jwt.ts               # JWT 插件
├── models/                  # mongoose 数据模型
│   ├── user.model.ts
│   ├── bookmark.model.ts
│   └── ...
├── routes/                  # 路由定义
│   ├── user.route.ts
│   ├── bookmark.route.ts
│   └── ...
├── controllers/             # 控制器/处理器
│   ├── user.controller.ts
│   ├── bookmark.controller.ts
│   └── ...
├── services/                # 业务逻辑
│   ├── user.service.ts
│   ├── bookmark.service.ts
│   └── ...
├── schemas/                 # 请求/响应校验（zod/ajv）
│   ├── user.schema.ts
│   ├── bookmark.schema.ts
│   └── ...
├── utils/                   # 工具函数
├── middlewares/             # 中间件
├── types/                   # 全局类型定义
├── config/                  # 配置文件
├── app.ts                   # Fastify 实例与主入口
└── main.ts                  # 启动脚本
```

## 组件创建规则

1. **推荐使用脚本/模板生成基础结构**，避免手动创建重复性文件。
2. **文件命名**：
   - 使用 kebab-case（如：user.service.ts）
3. **类/函数命名**：
   - 使用 PascalCase（类）或 camelCase（函数）

## 路由与控制器组织

1. **路由文件**只负责注册路由和校验 schema，实际处理逻辑委托给 controller。
2. **控制器**只处理请求与响应，业务逻辑委托给 service。
3. **service** 只处理业务逻辑和数据访问。

## 依赖注入与插件

- 推荐将数据库、redis、jwt 等通过 Fastify 插件挂载到实例（`fastify.decorate`）。
- 避免全局变量，所有依赖通过 request 实例访问。

## 数据库与 ODM 规范

### mongoose 使用规范

1. **模型定义**：
   - 所有 mongoose 数据模型定义放在 `src/models` 目录下
   - 每个集合对应一个 model 文件（如 `user.model.ts`）
2. **命名规范**：
   - 集合名用复数（如 users、bookmarks），model 名用 PascalCase（如 UserModel）
   - 字段名用 camelCase
   - 主键统一使用 `_id`（由 MongoDB 自动生成）
3. **Schema 设计**：
   - 明确字段类型、必填、默认值、索引等
   - 推荐为常用查询字段建立索引
   - 建议所有文档包含 `createdAt`、`updatedAt` 字段（可用 mongoose timestamps 选项）
   - 软删除可用 `deletedAt` 字段
   - 枚举用字符串类型并限定可选值

## 数据验证与转换

- 推荐使用 zod 或 ajv 进行请求/响应 schema 校验
- 路由层进行参数和 body 校验，service 层只处理已校验数据

## Redis 缓存规范

- Redis 客户端通过插件挂载
- 频繁访问但不常变数据可缓存，设置合理过期时间
- 实现缓存失效机制

## 错误与响应处理

- 统一使用 Fastify 的错误处理机制
- 返回标准化响应结构（如 `{ code, message, data }`）
- 全局注册错误钩子处理未捕获异常

## 测试规范

- 单元测试与源文件同目录，`.spec.ts` 后缀
- 覆盖率要求：核心业务逻辑 80% 以上
- 推荐使用 Vitest 或 Jest

## 安全最佳实践

- 认证用 fastify-jwt，敏感路由加中间件保护
- 敏感数据加密存储，HTTPS 传输
- 日志避免记录敏感信息

## 性能优化

- 合理使用 Redis 缓存
- 查询优化，常用字段建索引，避免全表扫描
- 使用 MongoDB 连接池