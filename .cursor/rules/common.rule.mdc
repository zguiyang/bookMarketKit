---
description: 
globs: 
alwaysApply: true
---
---
description: 本文档概述了BookmarketKit项目的通用开发标准和最佳实践，为代码组织、命名约定和开发工作流程提供了指导。
globs: apps/**/*.{ts,tsx,js,jsx}
---


# 项目开发规范

## 架构概述
我们采用Monorepo架构组织代码，将多个相关项目统一管理在一个代码仓库中，以实现代码共享、依赖管理和版本一致性。

## 项目结构
```
project-root/
├── apps/                    # 应用程序目录
│   ├── backend/             # 后端应用
│   │   ├── dist/            # 构建输出
│   │   ├── node_modules/    # 后端依赖
│   │   ├── src/             # 后端源码
│   │   ├── test/            # 后端测试
│   │   ├── .eslintrc.js     # 后端ESLint配置
│   │   ├── .gitignore       # 后端Git忽略
│   │   ├── .prettierrc      # 后端Prettier配置
│   │   ├── nest-cli.json    # NestJS配置
│   │   ├── package.json     # 后端包配置
│   │   ├── README.md        # 后端说明文档
│   │   ├── tsconfig.build.json  # 构建TS配置
│   │   └── tsconfig.json    # 后端TS配置
│   └── client/              # 前端应用
├── node_modules/            # 根依赖
├── prd/                     # 生产环境相关文件
├── package.json             # 根包配置
├── pnpm-lock.yaml          # pnpm锁文件
├── pnpm-workspace.yaml     # pnpm工作区配置
└── README.md                # 项目总体说明
```

## 命名规范
- 文件/目录：使用 kebab-case（例：user-profile/）
- React 组件：使用 PascalCase（例：UserProfile.tsx）
- 工具函数：使用 camelCase（例：getUserData.ts）
- 常量：使用 UPPER_SNAKE_CASE（例：API_ENDPOINT）
- CSS 类名：使用 kebab-case（例：header-container）

## 版本控制规范
### Git Commit 规范
- feat: 新功能
- fix: 修复问题
- docs: 文档更新
- style: 代码格式（不影响代码运行）
- refactor: 重构
- test: 测试相关
- chore: 构建过程或辅助工具的变动

### 分支管理
- main: 主分支，保持稳定
- develop: 开发分支
- feature/*: 新功能分支
- bugfix/*: 问题修复分支
- release/*: 发布分支

## 开发环境规范
### 包管理器
- 统一使用 pnpm
- 使用 workspace 管理依赖

### 环境要求
- Node.js >= 18.x
- 推荐使用 nvm 管理 Node.js 版本

### 编辑器配置
- 启用保存时自动格式化
- 使用 Prettier 作为默认格式化工具
- 启用 ESLint 自动修复

## 代码质量规范
### TypeScript 规范
- 启用严格模式
- 禁用 any 类型
- 优先使用 interface 而非 type
- 使用显式类型声明

### 代码格式化
- 使用 Prettier 进行代码格式化
- 使用 ESLint 进行代码质量检查
- 遵循项目的 .eslintrc 和 .prettierrc 配置

### 注释规范
- 组件和函数必须包含注释说明用途
- 复杂逻辑需要添加详细注释
- API 接口必须有清晰的文档说明

## 测试规范
### 测试框架
- 统一使用 Vitest
- 前端配合使用 React Testing Library
- 后端配合使用 Supertest 进行 API 测试

### 测试要求
- 业务代码覆盖率 > 80%
- 工具函数覆盖率 > 90%
- 测试文件命名：*.test.ts 或 *.test.tsx
- 测试文件放置在tests目录下

## 依赖管理与安装规范
### 包管理器使用规则
- 首选包管理器：所有依赖安装均使用统一的包管理器pnpm进行安装
- 命令执行：使用pnpx执行一次性命令，而非npx
- 替代方案：仅当pnpm/pnpx不可用时，才使用npm/npx作为替代
- 锁文件：统一使用pnpm-lock.yaml作为锁文件，不要混用不同包管理器的锁文件
- 依赖安装流程
- 检查现有依赖：安装依赖前先检查对应目录或项目下的package.json是否已存在该依赖
- 复用已有依赖：对于已存在的依赖直接使用，不要重复安装
- 明确安装目的：仅在以下情况重新安装或升级依赖：
- 明确需要更新到新版本
- 现有版本存在兼容性问题或安全漏洞
- 项目要求特定版本

### 依赖安装命令规范
- 安装项目依赖：pnpm install
- 安装新依赖：pnpm add <package-name>
- 安装开发依赖：pnpm add -D <package-name>
- 安装全局依赖：pnpm add -g <package-name>
- 工作区操作：pnpm --filter <package-name> <command>
- 更新依赖：pnpm update <package-name>

### 依赖管理最佳实践
- 共享依赖：在根package.json中定义共享依赖
- 局部依赖：在各应用package.json中定义特定依赖
- 工作区依赖：使用workspace:*或workspace:^引用内部包
- 定期审查：定期检查并更新过时依赖，特别是有安全漏洞的依赖
- 版本锁定：对关键依赖指定精确版本，避免使用^或~
- 依赖精简：避免不必要的依赖，减小项目体积和复杂度

