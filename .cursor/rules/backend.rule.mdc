---
description: 
globs: apps/backend/**/*.ts
alwaysApply: false
---
# 后端开发规范

## 技术栈概览

- **框架**：Fastify v5
- **数据库**：MongoDB（mongoose v8）
- **缓存**：Redis（@fastify/redis v7）
- **验证**：zod（fastify-type-provider-zod v4）
- **API文档**：OpenAPI/Swagger（@fastify/swagger v9）
- **配置管理**：环境变量（@fastify/env v5）
- **包管理**：pnpm workspace
- **测试框架**：Vitest v3

## 目录结构规范

```
src/
├── app.ts                   # 应用入口文件
├── bootstrap.ts             # Fastify实例初始化与配置
├── config/                  # 配置文件目录
│   ├── code-enums.config.ts # 状态码枚举定义
│   └── code-message.config.ts # 状态码对应消息
├── core/                    # 核心功能
│   ├── jwt/                # JWT相关实现
│   │   └── jwt.service.ts  # JWT服务
│   └── business-error.ts   # 业务错误处理
├── hooks/                   # 全局钩子函数
│   └── response-hook.ts     # 响应处理钩子
├── interfaces/              # 接口定义
│   └── user.ts             # 用户接口定义
├── middlewares/             # 中间件
│   ├── error-handler.ts     # 错误处理中间件
│   └── not-found-handler.ts # 404处理中间件
├── models/                  # Mongoose数据模型
│   ├── bookmark.model.ts    # 书签模型
│   ├── user.model.ts       # 用户模型
│   └── index.ts            # 模型导出
├── modules/                 # 业务模块
│   ├── bookmark/           # 书签模块
│   │   ├── category/       # 分类子模块
│   │   │   ├── category.controller.ts
│   │   │   ├── category.route.ts
│   │   │   └── category.service.ts
│   │   ├── tag/           # 标签子模块
│   │   │   ├── tag.controller.ts
│   │   │   ├── tag.route.ts
│   │   │   └── tag.service.ts
│   │   ├── bookmark.controller.ts
│   │   ├── bookmark.route.ts
│   │   └── bookmark.service.ts
│   ├── user/              # 用户模块
│   │   ├── user.controller.ts
│   │   ├── user.route.ts
│   │   └── user.service.ts
│   └── index.route.ts     # 路由入口
├── plugins/                # Fastify插件
│   ├── auth-context.ts    # 认证上下文插件
│   ├── db-connect.ts      # 数据库连接插件
│   ├── env.ts             # 环境变量插件
│   ├── jwt.ts             # JWT插件
│   ├── redis.ts           # Redis插件
│   └── swagger.ts         # Swagger文档插件
├── shared/                # 共享代码
│   └── mongoose/         # Mongoose相关
│       ├── common-transform.ts    # 通用转换
│       ├── leanTransformPlugin.ts # 精简转换插件
│       └── mongoose-type.ts       # Mongoose类型定义
├── typings/              # 类型声明
│   ├── fastify-env.d.ts  # 环境变量类型
│   ├── fastify-jwt.d.ts  # JWT类型
│   └── fastify.request.d.ts # 请求类型扩展
└── utils/               # 工具函数
    ├── bcrypt.ts       # 密码加密
    └── query-params.util.ts # 查询参数处理
```

## 开发规范

### 1. 模块化原则

- 每个业务模块必须包含controller、route和service三个核心文件
- 大型模块可以包含子模块（如bookmark模块包含category和tag子模块）
- 每个子模块同样遵循controller、route、service的结构
- 模块间的依赖关系应该清晰，避免循环依赖

#### 1.1 Controller职责
```typescript
// bookmark.controller.ts 示例
export class BookmarkController {
  constructor(private bookmarkService: BookmarkService) {}

  async create(request: FastifyRequest, reply: FastifyReply) {
    const bookmark = await this.bookmarkService.create(request.body);
    return reply.code(201).send(bookmark);
  }
}
```

#### 1.2 Route职责
```typescript
// bookmark.route.ts 示例
const bookmarkRoute: FastifyPluginAsync = async (fastify) => {
  const controller = new BookmarkController(new BookmarkService());

  fastify.route({
    method: 'POST',
    url: '/',
    schema: {
      body: createBookmarkSchema,
      response: {
        201: bookmarkResponseSchema
      }
    },
    handler: controller.create.bind(controller)
  });
};
```

#### 1.3 Service职责
```typescript
// bookmark.service.ts 示例
export class BookmarkService {
  async create(data: CreateBookmarkDto): Promise<Bookmark> {
    // 业务逻辑实现
  }
}
```

### 2. 插件系统规范

#### 2.1 插件注册顺序
1. env（环境变量配置）
2. db-connect（数据库连接）
3. redis（缓存服务）
4. jwt（认证服务）
5. auth-context（认证上下文）
6. swagger（API文档）

#### 2.2 插件开发规范
```typescript
// auth-context.ts 示例
export default fp(async (fastify) => {
  fastify.decorateRequest('user', null);
  fastify.addHook('preHandler', async (request) => {
    // 插件逻辑实现
  });
}, { name: 'auth-context' });
```

### 3. 数据模型规范

#### 3.1 基础模型结构
```typescript
// bookmark.model.ts 示例
const bookmarkSchema = new Schema({
  title: { type: String, required: true },
  url: { type: String, required: true },
  description: String,
  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  categoryId: { type: Schema.Types.ObjectId, ref: 'Category' },
  tags: [{ type: Schema.Types.ObjectId, ref: 'Tag' }]
}, {
  timestamps: true,
  toJSON: { virtuals: true },
  toObject: { virtuals: true }
});
```

#### 3.2 模型转换插件
```typescript
// 使用共享的转换插件
bookmarkSchema.plugin(leanTransformPlugin);
```

### 4. 错误处理规范

#### 4.1 业务错误定义
```typescript
// business-error.ts
export class BusinessError extends Error {
  constructor(
    public code: number,
    message: string,
    public data?: any
  ) {
    super(message);
  }
}
```

#### 4.2 错误处理中间件
```typescript
// error-handler.ts
export const errorHandler: FastifyErrorHandler = (error, request, reply) => {
  if (error instanceof BusinessError) {
    return reply.status(error.code).send({
      code: error.code,
      message: error.message,
      data: error.data
    });
  }
  // 其他错误处理
};
```

### 5. 环境配置规范

#### 5.1 环境变量文件
- `.env`: 默认环境变量
- `.env.development`: 开发环境
- `.env.test`: 测试环境
- `.env.production`: 生产环境

#### 5.2 环境变量定义
```typescript
// env.ts
export const envSchema = {
  type: 'object',
  required: ['PORT', 'MONGODB_URI'],
  properties: {
    PORT: { type: 'number', default: 3000 },
    MONGODB_URI: { type: 'string' },
    REDIS_URI: { type: 'string' },
    JWT_SECRET: { type: 'string' }
  }
};
```

### 6. 测试规范

#### 6.1 测试目录结构
```
tests/
├── modules/
│   ├── user/
│   │   ├── user.controller.test.ts
│   │   ├── user.route.test.ts
│   │   └── user.service.test.ts
│   └── bookmark/
└── hello.test.ts
```

#### 6.2 测试用例规范
```typescript
// user.service.test.ts 示例
describe('UserService', () => {
  describe('create', () => {
    it('should create a new user', async () => {
      // 测试实现
    });
  });
});
```

### 7. API文档规范

#### 7.1 Swagger配置
```typescript
// swagger.ts
export default fp(async (fastify) => {
  await fastify.register(swagger, {
    openapi: {
      info: {
        title: 'Bookmark API',
        description: '书签管理系统API文档',
        version: '1.0.0'
      }
    }
  });
});
```

#### 7.2 路由文档
```typescript
// 路由文档示例
fastify.route({
  method: 'POST',
  url: '/bookmarks',
  schema: {
    description: '创建新书签',
    tags: ['bookmarks'],
    body: createBookmarkSchema,
    response: {
      201: bookmarkResponseSchema
    }
  },
  handler: controller.create.bind(controller)
});
```

### 8. 安全规范

#### 8.1 认证机制
- 使用JWT进行身份验证
- 通过auth-context插件管理认证状态
- 敏感操作需要进行权限验证

#### 8.2 数据安全
- 密码必须使用bcrypt加密存储
- 敏感信息传输必须使用HTTPS
- API需要进行适当的访问控制

### 9. 性能优化规范

#### 9.1 数据库优化
- 合理使用索引
- 避免非必要的关联查询
- 大数据量查询必须使用分页

#### 9.2 缓存策略
- 合理使用Redis缓存热点数据
- 实现缓存更新和失效机制
- 避免缓存穿透和雪崩

### 10. 代码质量规范

#### 10.1 TypeScript规范
- 严格模式开启
- 避免使用any类型
- 优先使用interface定义类型

#### 10.2 命名规范
- 文件名：kebab-case
- 类名：PascalCase
- 方法名：camelCase
- 常量：UPPER_SNAKE_CASE

#### 10.3 注释规范
- 类和方法必须有JSDoc注释
- 复杂逻辑需要添加说明性注释
- 保持注释的及时更新

### 11. 日志规范

#### 11.1 日志配置
```typescript
// bootstrap.ts
const app = fastify({
  logger: {
    level: process.env.LOG_LEVEL || 'info',
    transport: isDev ? {
      target: 'pino-pretty',
      options: {
        translateTime: 'HH:MM:ss Z',
        ignore: 'pid,hostname'
      }
    } : undefined
  }
});
```

#### 11.2 日志使用
```typescript
// 日志示例
fastify.log.info('Server started on port %d', fastify.server.address().port);
fastify.log.error('Database connection failed', err);
```

### 12. 部署规范

#### 12.1 环境要求
- Node.js >= 18.x
- MongoDB >= 6.x
- Redis >= 7.x

#### 12.2 部署流程
1. 环境变量配置
2. 依赖安装
3. 构建项目
4. 数据库迁移
5. 服务启动

### 13. 版本控制规范

#### 13.1 分支管理
- main: 主分支
- develop: 开发分支
- feature/*: 功能分支
- bugfix/*: 修复分支
- release/*: 发布分支

#### 13.2 提交规范
- feat: 新功能
- fix: 修复问题
- docs: 文档更新
- style: 代码格式
- refactor: 重构
- test: 测试相关
- chore: 构建/工具