---
description: 
globs: apps/client/**/*.ts,apps/client/**/*.tsx
alwaysApply: false
---
---
description: 本文档概述了前端开发的最佳实践和标准，专注于TypeScript、React、Next.js和现代UI/UX框架的应用，旨在提供高性能、可维护的代码指南。
globs: apps/client/**/*.{ts,tsx,js,jsx}
---

# 前端开发规范

## 目标
- 创建不仅功能完善，而且遵循性能、安全性和可维护性最佳实践的Next.js解决方案。

## 代码风格与结构
- 编写简洁、技术性强的TypeScript代码，提供准确的示例。
- 使用函数式和声明式编程模式；避免使用类。
- 优先考虑迭代和模块化，避免代码重复。
- 使用描述性变量名，包含辅助动词（如`isLoading`、`hasError`）。
- 文件结构应包括导出的组件、子组件、辅助函数、静态内容和类型。
- 目录名使用小写字母加连字符（如`components/auth-wizard`）。

## 优化与最佳实践
- 最小化使用`'use client'`、`useEffect`和`setState`；优先使用React服务器组件(RSC)和Next.js的SSR功能。
- 实现动态导入以进行代码分割和优化。
- 使用响应式设计，采用移动优先的方法。
- 图片优化：使用WebP格式，包含尺寸数据，实现懒加载。

## 错误处理与验证
- 优先处理错误和边缘情况：
  - 对错误条件使用提前返回。
  - 实现防护条款，提前处理前置条件和无效状态。
  - 使用自定义错误类型进行一致的错误处理。

## UI和样式
- 使用现代UI框架（如Tailwind CSS、Shadcn UI、Radix UI）进行样式设计。
- 在各平台上实现一致的设计和响应式模式。

## Shadcn UI 组件使用规范

- 不要直接复制粘贴 Shadcn UI 组件代码到项目中
- 始终使用官方提供的安装命令添加组件，例如：`pnpm dlx shadcn@latest add button`
- 安装后再根据项目需求对组件进行自定义修改
- 保持组件结构与 Shadcn UI 文档一致，便于后续升级和维护
- 组件安装命令格式：`pnpm dlx shadcn@latest add [组件名称]`
- 常用组件安装示例：
  - 按钮：`pnpm dlx shadcn@latest add button`
  - 表单：`pnpm dlx shadcn@latest add form`
  - 对话框：`pnpm dlx shadcn@latest add dialog`
  - 下拉菜单：`pnpm dlx shadcn@latest add dropdown-menu`

## 组件使用优先级

- 优先使用已安装的 Shadcn UI 组件，避免重复造轮子
- 如果 Shadcn UI 没有提供所需组件，使用 Tailwind CSS + Radix UI 进行封装
- 只有在上述两种方案都无法满足需求时，才考虑使用 React 原生方式封装组件

## 组件使用原则

- 组件自定义应通过 Tailwind 类或主题配置进行，而非修改组件核心逻辑
- 遵循组件文档中推荐的用法和最佳实践
- 确保组件的无障碍性(a11y)符合项目要求


## 状态管理与数据获取
- 使用现代状态管理解决方案（如Zustand、TanStack React Query）处理全局状态和数据获取。
- 使用Zod实现模式验证。

## 安全性与性能
- 实施适当的错误处理、用户输入验证和安全编码实践。
- 遵循性能优化技术，如减少加载时间和提高渲染效率。

## 测试与文档
- 使用vitest和React Testing Library为组件编写单元测试。
- 为复杂逻辑提供清晰简洁的注释。
- 使用JSDoc注释函数和组件，以改善IDE智能提示。

## 方法论
### 系统2思维
- 以分析严谨的方式处理问题。
- 将需求分解为更小、更易管理的部分。
- 在实施前彻底考虑每个步骤。

### 思维树方法
- 评估多种可能的解决方案及其后果。
- 使用结构化方法探索不同路径并选择最佳方案。

### 迭代改进
- 在最终确定代码前，考虑改进、边缘情况和优化。
- 迭代潜在的增强功能，确保最终解决方案的稳健性。

## 开发流程
### 深入分析
- 开始时对手头任务进行彻底分析，考虑技术要求和约束。

### 规划
- 制定清晰的计划，概述解决方案的架构结构和流程。
- 必要时使用<PLANNING>标签。

### 实施
- 逐步实施解决方案，确保每个部分都遵循指定的最佳实践。

### 审查与优化
- 对代码进行审查，寻找潜在的优化和改进领域。

### 最终确定
- 通过确保代码满足所有要求、安全且高效来完成代码。
