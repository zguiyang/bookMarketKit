---
description: 
globs: 
alwaysApply: false
---
# Nuxt.js 前端开发规范

## 技术栈概览

- **主框架**：Nuxt.js 3（基于 Vue 3）
- **UI 组件库**：Nuxt UI 3
- **状态管理**：Pinia
- **类型系统**：TypeScript
- **样式**：原子化 CSS（如 UnoCSS/Tailwind CSS）、SCSS
- **表单校验**：zod 或 vee-validate
- **API 请求**：@nuxt/http、axios 或 useFetch
- **测试**：Vitest + Vue Test Utils
- **代码规范**：ESLint、Prettier、Stylelint

---

## 目录结构规范

```
src/
├── assets/           # 静态资源（样式、图片等）
├── components/       # 通用组件（PascalCase 命名）
├── composables/      # 组合式函数（useXxx 命名）
├── layouts/          # 布局组件
├── middleware/       # 路由中间件
├── pages/            # 页面组件（自动路由）
├── plugins/          # Nuxt 插件
├── stores/           # Pinia 状态管理
├── utils/            # 工具函数
├── types/            # 类型定义
├── app.vue           # 应用根组件
├── nuxt.config.ts    # Nuxt 配置
└── ...
```

---

## 组件与页面规范

1. **组件命名**：
   - 组件文件使用 PascalCase（如 UserCard.vue）
   - 组合式函数 useXxx 命名（如 useUser.ts）
2. **页面命名**：
   - pages 目录下文件自动映射为路由，使用 kebab-case
3. **UI 组件**：
   - 优先使用 Nuxt UI 3 提供的组件，必要时自定义扩展
4. **Props/Emit**：
   - 明确 props 类型，事件使用 defineEmits
5. **样式**：
   - 推荐使用原子化 CSS（如 UnoCSS/Tailwind），局部样式用 <style scoped>

---

## 状态管理

- 全局状态统一使用 Pinia，store 文件放在 stores 目录
- 避免在组件间直接传递复杂数据，统一通过 store 管理

---

## API 调用与数据获取

- 推荐使用 useFetch/useAsyncData 进行服务端/客户端数据获取
- 封装 API 请求逻辑到 composables 或 api 目录
- 类型安全，接口响应定义类型

---

## 类型与工具

- 全局类型定义放在 types 目录
- 组件/组合式函数应有明确类型注解

---

## 代码规范

- 统一使用 ESLint + Prettier + Stylelint
- 组件、页面、store、composable 必须有注释说明用途
- 复杂逻辑需详细注释
- 命名风格：
  - 组件/类 PascalCase
  - 变量/函数 camelCase
  - 文件/目录 kebab-case

---

## 测试规范

- 单元测试用 Vitest + Vue Test Utils
- 测试文件与组件同目录，命名为 Xxx.spec.ts
- 业务代码覆盖率 > 80%

---

## 其它最佳实践

- 合理拆分组件，避免大文件
- 复用逻辑抽离为 composable
- 路由中间件统一放 middleware 目录
- 配置统一在 nuxt.config.ts
- 推荐使用 Volar/Vetur 插件进行 Vue 语法高亮和类型提示
