---
description: project-rules
globs: 
alwaysApply: false
---
# Project Development Standards

## Technology Stack and Architecture

**Frontend Technology Stack**:
- Next.js as React framework
- TypeScript for type safety
- React for UI component development
- Tailwind CSS for styling
- Shadcn UI and Radix UI as component libraries
- Zustand for client-side state management
- SWR for data fetching
- Zod for data validation

**Backend Technology Stack**:
- Node.js as runtime environment
- NestJS as backend framework
- TypeScript for type safety
- PostgreSQL as primary relational database
- MongoDB for unstructured data
- Drizzle ORM for database operations
- Zod for data validation
- Redis for caching and session management

**Testing Framework**:
- Vitest for unit and integration testing

**Project Architecture**:
- Monorepo structure for managing frontend and backend applications
- pnpm workspace for dependency management

## Monorepo Structure
```
root/
├── apps/
│   ├── client/     # Frontend application code
│   └── backend/    # Backend service code
├── pnpm-workspace.yaml
├── package.json
├── tsconfig.base.json
└── README.md
```

## Development Standards Guide

1. **Type Safety**
   - All code must use TypeScript
   - Avoid using `any` type
   - Define clear types for function parameters and return values
   - Use Zod to validate external data

2. **Naming Conventions**
   - File names: kebab-case
   - Components/Classes: PascalCase
   - Functions/Variables: camelCase
   - Constants: UPPER_SNAKE_CASE
   - Database tables: snake_case

3. **Frontend Development**
   - Use functional components and React Hooks
   - Adopt Tailwind CSS for styling
   - Use Shadcn UI and Radix UI as base components
   - Prioritize Zustand for state management
   - Use SWR for data fetching

4. **Backend Development**
   - Follow NestJS modular architecture
   - Use Drizzle ORM for database operations
   - Implement Repository pattern to encapsulate data access
   - API should follow RESTful design principles
   - Use DTOs to define request and response structures

5. **Testing Strategy**
   - Write tests using Vitest
   - Unit tests should cover core logic
   - Integration tests verify component interactions

## Code Generation Requirements

When generating code, please follow these rules:

1. **Technology Choices**
   - Frontend components using React functional components
   - Styling using Tailwind CSS classes
   - State management using Zustand
   - Data fetching using SWR
   - Backend using NestJS structure
   - Database operations using Drizzle ORM
   - Data validation using Zod

2. **Code Style**
   - Use TypeScript type annotations
   - Avoid side effects, prefer pure functions
   - Define component props using interfaces
   - Use destructuring to extract properties
   - Use async/await rather than callbacks

3. **Best Practices**
   - Components should be small and focused
   - Separate logic from views
   - Use custom hooks to encapsulate complex logic
   - Implement proper error handling
   - Consider performance optimizations (memo, useMemo, useCallback)

4. **Architectural Patterns**
   - Follow modular design
   - Use dependency injection to manage services
   - Implement separation of concerns
   - Avoid tightly coupled components

Please generate code that complies with the project's technology stack and architecture according to these standards.