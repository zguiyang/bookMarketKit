---
description: 
globs: 
alwaysApply: true
---
# 项目通用开发规范

## 架构概述

本项目采用 Monorepo 架构，统一管理前后端多个子项目，实现依赖共享、版本一致和高效协作。

- **前端**：Nuxt.js 3（Vue 3）+ Nuxt UI 3
- **后端**：Fastify.js + MongoDB（mongoose）
- **包管理**：pnpm workspace

---

## 项目结构

```
project-root/
├── apps/
│   ├── backend/           # 后端服务（Fastify + mongoose）
│   └── client/            # 前端应用（Nuxt 3 + Nuxt UI 3）
├── node_modules/
├── package.json           # 根包配置
├── pnpm-lock.yaml         # pnpm 锁文件
├── pnpm-workspace.yaml    # pnpm 工作区配置
└── README.md              # 项目总体说明
```

---

## 命名规范

- **文件/目录**：kebab-case（如：user-profile/）
- **Vue/Nuxt 组件**：PascalCase（如：UserCard.vue）
- **后端类/模型**：PascalCase（如：UserModel）
- **函数/变量**：camelCase
- **常量**：UPPER_SNAKE_CASE
- **CSS 类名**：kebab-case

---

## 版本控制规范

- **Git Commit 规范**：
  - feat: 新功能
  - fix: 修复问题
  - docs: 文档更新
  - style: 代码格式（不影响代码运行）
  - refactor: 重构
  - test: 测试相关
  - chore: 构建过程或辅助工具的变动
- **分支管理**：
  - main: 主分支，保持稳定
  - develop: 开发分支
  - feature/*: 新功能分支
  - bugfix/*: 问题修复分支
  - release/*: 发布分支

---

## 开发环境规范

- 统一使用 pnpm 作为包管理器
- Node.js >= 18.x，推荐使用 nvm 管理 Node 版本
- 编辑器建议启用保存时自动格式化，使用 Prettier、ESLint、Stylelint

---

## 代码质量规范

- **TypeScript**：全项目启用严格模式，禁止 any，优先 interface
- **格式化**：Prettier
- **代码检查**：ESLint（前后端）、Stylelint（前端样式）
- **注释**：组件、函数、复杂逻辑必须有注释说明
- **API 文档**：后端接口需有 Swagger/OpenAPI 文档，前端接口类型需定义

---

## 测试规范

- **前端**：Vitest + Vue Test Utils，测试文件 *.spec.ts，覆盖率 > 80%
- **后端**：Vitest 或 Jest，测试文件 *.spec.ts，覆盖率 > 80%
- **测试文件**：与源文件同目录

---

## 依赖管理与安装规范

- 统一使用 pnpm 安装依赖
- 安装新依赖：pnpm add <package-name>
- 安装开发依赖：pnpm add -D <package-name>
- 安装全局依赖：pnpm add -g <package-name>
- 工作区操作：pnpm --filter <package-name> <command>
- 更新依赖：pnpm update <package-name>
- 依赖优先在根 package.json 共享，特定依赖在各子项目 package.json
- 定期审查并更新过时依赖，关键依赖锁定精确版本

---

## 其它通用要求

- 组件/逻辑应模块化、可复用，避免重复代码
- 目录结构清晰，分层合理，便于维护和扩展
- 重要变更需同步更新相关文档
- 严格遵循各自领域的详细开发规范（详见 backend.rule.mdc、frontend.rule.mdc）

