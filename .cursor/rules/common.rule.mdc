---
description: common standards.mdc
globs: 
alwaysApply: false
---
---
description: 本文档概述了BookmarketKit项目的通用开发标准和最佳实践，为代码组织、命名约定和开发工作流程提供了指导。
globs: apps/**/*.{ts,tsx,js,jsx}
---


# 项目开发规范

## 架构概述
我们采用Monorepo架构组织代码，将多个相关项目统一管理在一个代码仓库中，以实现代码共享、依赖管理和版本一致性。

## 项目结构
```
project-root/
├── apps/                    # 应用程序目录
│   ├── backend/             # 后端应用
│   │   ├── dist/            # 构建输出
│   │   ├── node_modules/    # 后端依赖
│   │   ├── src/             # 后端源码
│   │   ├── test/            # 后端测试
│   │   ├── .eslintrc.js     # 后端ESLint配置
│   │   ├── .gitignore       # 后端Git忽略
│   │   ├── .prettierrc      # 后端Prettier配置
│   │   ├── nest-cli.json    # NestJS配置
│   │   ├── package.json     # 后端包配置
│   │   ├── README.md        # 后端说明文档
│   │   ├── tsconfig.build.json  # 构建TS配置
│   │   └── tsconfig.json    # 后端TS配置
│   └── client/              # 前端应用
├── node_modules/            # 根依赖
├── prd/                     # 生产环境相关文件
├── package.json             # 根包配置
├── pnpm-lock.yaml          # pnpm锁文件
├── pnpm-workspace.yaml     # pnpm工作区配置
└── README.md                # 项目总体说明
```

## 命名规范
- 文件/目录：使用 kebab-case（例：user-profile/）
- React 组件：使用 PascalCase（例：UserProfile.tsx）
- 工具函数：使用 camelCase（例：getUserData.ts）
- 常量：使用 UPPER_SNAKE_CASE（例：API_ENDPOINT）
- CSS 类名：使用 kebab-case（例：header-container）

## 版本控制规范
### Git Commit 规范
- feat: 新功能
- fix: 修复问题
- docs: 文档更新
- style: 代码格式（不影响代码运行）
- refactor: 重构
- test: 测试相关
- chore: 构建过程或辅助工具的变动

### 分支管理
- main: 主分支，保持稳定
- develop: 开发分支
- feature/*: 新功能分支
- bugfix/*: 问题修复分支
- release/*: 发布分支

## 开发环境规范
### 包管理器
- 统一使用 pnpm
- 使用 workspace 管理依赖

### 环境要求
- Node.js >= 18.x
- 推荐使用 nvm 管理 Node.js 版本

### 编辑器配置
- 启用保存时自动格式化
- 使用 Prettier 作为默认格式化工具
- 启用 ESLint 自动修复

## 代码质量规范
### TypeScript 规范
- 启用严格模式
- 禁用 any 类型
- 优先使用 interface 而非 type
- 使用显式类型声明

### 代码格式化
- 使用 Prettier 进行代码格式化
- 使用 ESLint 进行代码质量检查
- 遵循项目的 .eslintrc 和 .prettierrc 配置

### 注释规范
- 组件和函数必须包含注释说明用途
- 复杂逻辑需要添加详细注释
- API 接口必须有清晰的文档说明

## 测试规范
### 测试框架
- 统一使用 Vitest
- 前端配合使用 React Testing Library
- 后端配合使用 Supertest 进行 API 测试

### 测试要求
- 业务代码覆盖率 > 80%
- 工具函数覆盖率 > 90%
- 测试文件命名：*.test.ts 或 *.test.tsx
- 测试文件放置在tests目录下


