---
description: 全栈开发规范与最佳实践
globs: 
alwaysApply: false
---
# 全栈开发规范与最佳实践

## 通用原则

### 代码风格
- 所有代码和文档使用英语。
- 每个文件只有一个主要导出。
- 保持代码简洁，避免不必要的复杂性。
- 函数内不留空行。

### 类型系统
- 始终声明变量和函数的类型（参数和返回值）。
- 避免使用any类型。
- 创建明确的接口和类型定义。
- 优先考虑数据不可变性（使用readonly和as const）。

### 命名规范
- 类使用PascalCase。
- 变量、函数和方法使用camelCase。
- 文件和目录名使用kebab-case。
- 环境变量使用大写。
- 函数名以动词开头。
- 布尔变量使用助动词（isLoading、hasError、canDelete等）。
- 使用完整单词而非缩写（标准缩写如API、URL除外）。
- 常见可接受的缩写：
  - i、j用于循环
  - err用于错误
  - ctx用于上下文
  - req、res、next用于中间件函数参数

### 函数设计
- 编写短小且单一目的的函数（少于20条指令）。
- 函数命名反映其行为（返回布尔值用isX/hasX，无返回用executeX/saveX）。
- 通过早期返回和提取工具函数避免嵌套块。
- 使用高阶函数（map、filter、reduce等）简化代码。
- 使用默认参数值代替null/undefined检查。
- 采用RO-RO模式（接收对象-返回对象）减少参数复杂度。
- 遵循单一抽象级别原则。

### 数据处理
- 将数据封装在复合类型中，避免滥用原始类型。
- 使用专门的验证机制，避免在函数中重复验证数据。
- 优先使用不可变数据结构。

### 异常处理
- 使用异常处理意外错误。
- 捕获异常应有明确目的：修复问题或添加上下文。
- 实现早期返回和守卫条款处理边缘情况。
- 使用自定义错误类型保持一致性。

### 文档
- 使用JSDoc记录公共类和方法。
- 为复杂逻辑提供清晰简洁的注释。
- 文档应解释"为什么"而不仅是"什么"。

## 服务端开发原则

### 架构设计
- 采用模块化架构，明确职责分离。
- 使用依赖注入管理组件间关系。
- 实现分层架构（控制器、服务、存储）。
- 保持业务逻辑与基础设施代码分离。

### API设计
- 遵循RESTful设计原则。
- 使用DTO验证输入数据。
- 为输出定义明确的类型。
- 实现适当的错误处理和状态码。

### 安全性
- 实施输入验证和参数清理。
- 使用适当的认证和授权机制。
- 防范常见安全威胁（SQL注入、XSS等）。
- 实现速率限制和其他防护措施。

### 测试策略
- 编写全面的单元测试。
- 实现集成测试验证组件协作。
- 编写端到端测试验证关键流程。
- 遵循Arrange-Act-Assert模式。
- 使用清晰的测试命名约定（inputX、mockX、actualX、expectedX）。

## 前端开发原则

### 组件设计
- 优先使用函数式组件。
- 将UI拆分为小型、可重用的组件。
- 清晰区分展示型和容器型组件。
- 避免过度嵌套组件层次结构。

### 状态管理
- 最小化组件状态，仅保留必要状态。
- 选择适当的状态管理方案（本地状态、全局状态）。
- 实现有效的数据获取和缓存策略。
- 使用模式验证确保数据完整性。

### 性能优化
- 实现代码分割和懒加载。
- 优化渲染性能（避免不必要的重渲染）。
- 实现资源优化（图片、字体、脚本）。
- 采用服务器端渲染或静态生成提高性能。

### 响应式设计
- 采用移动优先的设计方法。
- 实现一致的响应式布局。
- 确保跨设备兼容性。
- 优化触摸和手势交互。

### 可访问性
- 遵循WCAG指南。
- 使用语义化HTML元素。
- 实现键盘导航支持。
- 提供适当的ARIA属性和角色。

### 测试策略
- 编写组件单元测试。
- 实现交互测试验证用户流程。
- 编写端到端测试验证关键功能。
- 测试跨浏览器兼容性。

## 开发方法论

### 思考方式
1. **系统性思维**：分析问题的各个方面，考虑整体架构和组件间关系。
2. **多方案评估**：探索多种可能解决方案，权衡利弊选择最优方案。
3. **迭代改进**：持续评估和优化代码，考虑边缘情况和性能问题。

### 开发流程
1. **需求分析**：深入理解问题域和技术要求。
2. **架构设计**：制定清晰的解决方案架构。
3. **增量实现**：逐步构建功能，确保每个部分符合规范。
4. **代码审查**：检查代码质量、性能和安全性。
5. **测试验证**：确保功能正确性和系统稳定性。
6. **持续改进**：基于反馈和新需求优化解决方案。