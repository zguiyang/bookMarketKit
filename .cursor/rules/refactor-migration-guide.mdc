---
description: 
globs: 
alwaysApply: false
---
# 重构迁移规范文档（Refactor Migration Guide）

## 1. 背景与目标

本规范用于指导将 `old-codes/` 目录下的前后端业务与功能，系统性迁移至新架构 `apps/` 目录下。目标是实现所有核心业务的无缝迁移、架构升级与规范统一，确保功能完整、结构清晰、便于维护。

- 旧架构：NestJS（后端）、Next.js（前端），业务分散，部分规范不统一。
- 新架构：Fastify.js + MongoDB（后端）、Nuxt 3（前端，待迁移），采用 Monorepo 管理，模块化、类型共享、规范统一。

## 2. 新旧架构对比

| 维度         | 旧架构（old-codes）         | 新架构（apps）                |
|--------------|----------------------------|-------------------------------|
| 后端         | NestJS + TypeORM/Drizzle   | Fastify.js + Mongoose         |
| 前端         | Next.js                    | Nuxt 3（Vue 3）               |
| 目录结构     | 分散，前后端独立           | Monorepo，apps+packages统一   |
| 类型定义     | 各自维护                   | packages/schemas 统一共享     |
| 错误码/消息  | 各自维护                   | packages/code-definitions 统一 |
| 依赖管理     | 各自 package.json           | pnpm workspace 统一           |
| 规范         | 部分自定义                 | 统一规范文档（.cursor/rules） |

## 3. 迁移原则

1. **功能等价**：迁移后功能需与旧版保持一致，逐步优化。
2. **结构对齐**：遵循新架构目录与模块划分，业务归类到 apps/backend/src/modules 下。
3. **类型复用**：所有数据模型、DTO、接口类型迁移到 packages/schemas，避免重复定义。
4. **错误码统一**：错误码、消息迁移到 packages/code-definitions，支持国际化。
5. **规范优先**：严格遵循 .cursor/rules 下相关规范文档。
6. **渐进迁移**：优先迁移后端核心业务，前端可分阶段迁移。

## 4. 迁移流程

1. **需求梳理**：对照 requirement-document.mdc，梳理所有需迁移的业务与功能点。
2. **模块映射**：建立 old-codes/backend/src/modules 与 apps/backend/src/modules 的一一映射关系。
3. **类型迁移**：将旧版 DTO、Schema、接口类型迁移/合并到 packages/schemas，并全局复用。
4. **业务迁移**：按模块迁移 service、controller、route，适配 Fastify/Mongoose。
5. **错误码迁移**：将错误码、消息迁移到 packages/code-definitions，统一管理。
6. **测试迁移**：迁移并补充单元测试，确保功能一致。
7. **前端迁移**：后端稳定后，分阶段迁移前端到 apps/client（Nuxt 3）。
8. **联调验证**：前后端联调，确保功能闭环。
9. **文档同步**：迁移过程中同步更新相关文档。

## 5. 代码适配与模块映射

- 旧后端模块（如 bookmark、user、tag、category）迁移到 apps/backend/src/modules 下同名目录。
- DTO、Schema 迁移到 packages/schemas 对应子目录（如 bookmark、user）。
- 错误码、消息迁移到 packages/code-definitions。
- 公共工具函数迁移到 apps/backend/src/utils 或 packages/schemas/common。
- 前端页面、组件、hooks 等后续迁移到 apps/client。

## 6. 注意事项与常见问题

- **依赖适配**：新后端统一使用 Fastify.js、Mongoose，相关依赖需适配。
- **类型冲突**：迁移类型时注意命名冲突与兼容性，优先合并、去重。
- **接口变更**：如有接口变更，需同步更新前端及文档。
- **测试覆盖**：迁移后需补充/完善单元测试，覆盖率>80%。
- **规范遵循**：严格遵循 common.rule.mdc、backend.rule.mdc、frontend.rule.mdc 等规范。
- **渐进式迁移**：允许部分功能暂时保留在旧架构，逐步迁移。

## 7. 参考规范文档

- [requirement-document.mdc] 需求与功能清单
- [common.rule.mdc] 通用开发规范
- [backend.rule.mdc] 后端开发规范
- [frontend.rule.mdc] 前端开发规范
- [git-commit.rule.mdc] Git 提交规范
- [ai.interaction.rule.mdc] AI 交互规范

---

如遇特殊迁移场景或疑难问题，优先查阅上述规范文档，或补充本迁移规范。
