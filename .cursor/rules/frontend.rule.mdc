---
description: 
globs: apps/web/**/*.vue,apps/web/**/*.ts
alwaysApply: false
---
# 前端开发规范

## 技术栈概览

- **主框架**：Nuxt.js 3（基于 Vue 3）
- **UI 组件库**：Nuxt UI 3
- **状态管理**：Pinia
- **类型系统**：TypeScript
- **样式**：原子化 CSS（如 UnoCSS/Tailwind CSS）、SCSS
- **表单校验**：zod 或 vee-validate
- **API 请求**：@nuxt/http、axios 或 useFetch
- **测试**：Vitest + Vue Test Utils
- **代码规范**：ESLint、Prettier、Stylelint

---

## UI 组件库与样式规范

### Nuxt UI 3 组件库
- 所有 Nuxt UI 3 组件均已自动注册，无需手动 import，直接在模板中使用。
- 组件名称统一以 `u-`（kebab-case）或 `U`（PascalCase）为前缀，如 `u-button` 或 `UButton`。
- 组件 props、事件、插槽等用法请参考 [Nuxt UI 官方文档](mdc:https:/ui.nuxt.com/components/button)。
- 推荐优先使用官方 UI 组件，必要时可自定义扩展。
- **如需扩展自定义组件，优先考虑使用 Reka UI + TailwindCSS 或 Nuxt UI 实现，非必要不自造轮子。如确需完全自定义组件，需先与负责人确认。**

### TailwindCSS v4
- 项目统一使用 TailwindCSS v4 作为原子化 CSS 框架。
- 页面和组件样式应尽量通过 Tailwind 的 class 实现，**避免自定义 CSS**。
- 仅在特殊场景下（如全局样式、第三方库适配）才允许自定义 CSS。
- 推荐充分利用 Tailwind 的响应式、伪类、变量等特性，提升开发效率和样式一致性。

---

## 依赖与工具（@package.json）

项目主要依赖和工具如下，需在 `apps/web/package.json` 中声明和管理：

- **核心依赖**：
  - `nuxt`：Nuxt 3 主框架
  - `vue`：Vue 3 框架
  - `vue-router`：Vue 路由（Nuxt 内部集成）
  - `typescript`：类型系统
- **UI/内容/图标**：
  - `@nuxt/ui`：官方 UI 组件库
  - `@nuxt/content`：内容管理与 Markdown 渲染
  - `@nuxt/fonts`：字体管理
  - `@nuxt/icon`：图标管理
  - `@nuxt/image`：图片优化
- **主题/色彩**：
  - `@nuxtjs/color-mode`：主题色模式切换
- **样式**：
  - `tailwindcss`：原子化 CSS 框架
  - `@tailwindcss/vite`：Tailwind Vite 插件
- **代码规范与测试**：
  - `eslint`、`@nuxt/eslint`：代码规范
  - `@nuxt/test-utils`：测试工具
- **其它**：
  - `@nuxt/http`、`axios`：API 请求（可选）

> 依赖需按需引入，版本号建议与主流社区保持同步，详见实际 package.json。

---

## 配置文件（@nuxt.config.ts）

项目主配置文件为 `apps/web/nuxt.config.ts`，主要内容包括：

- `srcDir`：主业务目录，统一为 `src/`
- `modules`：
  - `@nuxt/eslint`：集成 ESLint
  - `@nuxt/fonts`：字体管理
  - `@nuxt/ui`：UI 组件库
  - `@nuxt/icon`：图标管理
  - `@nuxtjs/color-mode`：主题色模式
  - `@nuxt/image`：图片优化
  - `@nuxt/test-utils`：测试工具
- `css`：全局样式入口（如 `~/assets/css/main.css`）
- `colorMode`：主题色配置
- `runtimeConfig`：运行时配置（如后端服务地址 `backendServerUrl`）
- `vite.plugins`：Vite 插件（如 TailwindCSS）

> 配置项需根据实际业务需求灵活调整，详见实际 nuxt.config.ts。

---

## 目录结构规范

前端代码统一放置于 `apps/web` 目录，主业务目录为 `apps/web/src`。所有目录结构必须严格遵循 Nuxt 3 官方约定式规范，扩展自定义目录时不得与 Nuxt 3 约定目录冲突。

### Nuxt 3 官方约定目录与文件（必须完整保留，未用到时也建议预留空目录/文件防止冲突）

```
apps/
└── web/
    ├── package.json
    ├── nuxt.config.ts         # Nuxt 配置文件（根目录）
    └── src/
        ├── app.vue           # 应用根组件（入口）
        ├── app.config.ts     # 应用配置（可选）
        ├── error.vue         # 全局错误页面（可选）
        ├── assets/           # 静态资源（样式、图片、字体等）
        ├── components/       # 通用组件（PascalCase 命名，自动全局注册）
        ├── composables/      # 组合式函数（useXxx 命名，自动导入）
        ├── layouts/          # 布局组件（自动注册）
        ├── middleware/       # 路由中间件（自动注册）
        ├── pages/            # 页面组件（自动路由生成，kebab-case 命名）
        ├── plugins/          # Nuxt 插件（自动注册）
        ├── public/           # 公共静态资源（对外可访问，自动映射到根路径）
        ├── server/           # 服务端 API、server middleware、server plugins 等（自动注册）
        ├── shared/           # 跨端共享代码（如 composable、类型、工具等
        ├── stores/           # Pinia 状态管理（自动注册）
        ├── utils/            # 工具函数（可扩展）
        └── ...               # 其它自定义目录（不得与上述目录重名）
```

#### 目录/文件说明：
- `app.vue`：应用根组件，所有页面的入口。
- `app.config.ts`：应用级配置（如全局 meta、head、主题等）。
- `error.vue`：全局错误页面，处理未捕获异常。
- `assets/`：静态资源目录，存放样式、图片、字体等，**不会**被自动暴露到 public 路径。
- `components/`：通用组件目录，支持自动全局注册。
- `composables/`：组合式函数目录，支持自动导入。
- `layouts/`：布局组件目录，支持自动注册。
- `middleware/`：路由中间件目录，支持自动注册。
- `pages/`：页面组件目录，自动生成路由。
- `plugins/`：Nuxt 插件目录，自动注册。
- `public/`：对外可访问的静态资源目录，自动映射到根路径。
- `server/`：服务端 API、server middleware、server plugins 等，自动注册。
- `shared/`：跨端共享代码目录（如 composable、类型、工具等，Nuxt 3.10+ 新增，推荐使用）。
- `stores/`：Pinia 状态管理目录，自动注册。
- `utils/`：工具函数目录，可扩展。
- `...`：其它自定义目录，**不得与上述 Nuxt 3 约定目录重名**。

> ⚠️ **注意：**
> - 所有主业务代码必须放在 `src` 目录下，根目录仅保留配置和依赖文件。
> - 扩展目录如 `modules/`、`services/` 等，需确保不与 Nuxt 3 约定目录重名。
> - 类型定义建议全部放在 `src/types/`，Nuxt 会自动合并类型声明。
> - 组件、页面、store、composable 必须有注释说明用途。

---

## 组件与页面规范

1. **组件命名**：
   - 组件文件使用 PascalCase（如 UserCard.vue）
   - 组合式函数 useXxx 命名（如 useUser.ts）
2. **页面命名**：
   - pages 目录下文件自动映射为路由，使用 kebab-case
3. **UI 组件**：
   - 优先使用 Nuxt UI 3 提供的组件，必要时自定义扩展
4. **Props/Emit**：
   - 明确 props 类型，事件使用 defineEmits
5. **样式**：
   - 推荐使用原子化 CSS（如 UnoCSS/Tailwind），局部样式用 <style scoped>

---

## 状态管理

- 全局状态统一使用 Pinia，store 文件放在 stores 目录
- 避免在组件间直接传递复杂数据，统一通过 store 管理

---

## API 调用与数据获取

- 推荐使用 useFetch/useAsyncData 进行服务端/客户端数据获取
- 封装 API 请求逻辑到 composables 或 api 目录
- 类型安全，接口响应定义类型

---

## 类型与工具

- 全局类型定义放在 src/types 目录，Nuxt 会自动合并类型声明
- 组件/组合式函数应有明确类型注解

---

## 代码规范

- 统一使用 ESLint + Prettier + Stylelint
- 组件、页面、store、composable 必须有注释说明用途
- 复杂逻辑需详细注释
- 命名风格：
  - 组件/类 PascalCase
  - 变量/函数 camelCase
  - 文件/目录 kebab-case

---

## 测试规范

- 单元测试用 Vitest + Vue Test Utils
- 测试文件与组件同目录，命名为 Xxx.spec.ts
- 业务代码覆盖率 > 80%

---

## 其它最佳实践

- 合理拆分组件，避免大文件
- 复用逻辑抽离为 composable
- 路由中间件统一放 middleware 目录
- 配置统一在 nuxt.config.ts
- 推荐使用 Volar/Vetur 插件进行 Vue 语法高亮和类型提示
