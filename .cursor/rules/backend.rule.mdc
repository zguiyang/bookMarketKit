---
description: 
globs: apps/backend/**/*.ts
alwaysApply: false
---
---
description: 本规范提供了NestJS最佳实践、编码标准和架构模式的全面指导。旨在通过涵盖代码组织、安全性、测试和其他关键方面，帮助开发者构建可扩展、可维护和高性能的NestJS应用。
globs: apps/backend/**/*.{ts}
---

# NestJS后端开发规范

## 代码组织与结构
### 目录结构
- 采用反映应用程序领域或功能的模块化结构。常见方法包括将代码组织为模块、服务、控制器、DTO和实体，每个都在自己的目录中。
- 示例：
  ```
  src/
  ├── app.module.ts
  ├── auth/
  │   ├── auth.module.ts
  │   ├── auth.controller.ts
  │   ├── auth.service.ts
  │   ├── strategies/
  │   │   └── jwt.strategy.ts
  │   ├── dtos/
  │   │   └── create-user.dto.ts
  │   └── entities/
  │       └── user.entity.ts
  ├── users/
  │   ├── users.module.ts
  │   ├── users.controller.ts
  │   ├── users.service.ts
  │   └── ...
  ├── core/
  │   ├── filters/
  │   │   └── http-exception.filter.ts
  │   ├── interceptors/
  │   │   └── logging.interceptor.ts
  │   └── ...
  └── main.ts
  ```

### 文件命名约定
- 使用描述性和一致的命名约定。根据其角色前缀文件（例如，`user.controller.ts`、`auth.service.ts`、`create-user.dto.ts`）。
- 类和接口使用PascalCase（例如，`UserService`、`CreateUserDto`）。
- 实例和变量使用camelCase（例如，`userService`、`createUserDto`）。

### 模块组织
- 将功能封装在模块中。每个模块应代表应用程序的不同部分，处理相关功能。
- 模块应导入必要的依赖项，并导出其他模块需要的组件。
- 使用`forRoot`和`forFeature`方法分别用于配置和功能模块，特别是处理数据库连接或其他共享资源时。

### 组件架构
- 设计组件时遵循SOLID原则。每个组件（控制器、服务等）应有单一职责。
- 使用依赖注入管理组件之间的依赖关系，使其更易于测试和维护。
- 控制器应处理请求路由和验证，服务应实现业务逻辑，实体应表示数据模型。

### 代码拆分策略
- 对于大型应用程序，考虑使用功能模块或懒加载模块将模块拆分为更小、更易管理的块。
- 使用动态导入和懒加载来改善初始加载时间并减少包大小。

## 常见模式与反模式
### 设计模式
- **依赖注入**：使用NestJS内置的依赖注入容器管理依赖并促进松耦合。
- **仓库模式**：将数据访问逻辑抽象到仓库中，以将服务与特定数据库实现解耦。
- **工作单元**：使用工作单元模式管理跨多个仓库的事务。
- **CQRS（命令查询责任分离）**：对于复杂应用，考虑使用CQRS分离读写操作，提高性能和可扩展性。

### 推荐方法
- 使用DTO（数据传输对象）进行数据验证和层间转换。
- 实现全局异常过滤器，在整个应用程序中一致地处理错误。
- 使用拦截器进行日志记录、缓存和其他横切关注点。
- 利用管道进行请求验证和数据转换。
- 使用异步操作（`async/await`）进行非阻塞I/O操作。

### 反模式
- **紧耦合**：避免创建难以测试和维护的紧耦合组件。使用依赖注入和接口促进松耦合。
- **上帝类**：避免创建责任过多的类。将大型类分解为更小、更易管理的组件。
- **忽略错误**：始终使用try-catch块、异常过滤器和日志记录正确处理错误。永远不要忽略错误或吞噬异常。
- **硬编码配置**：避免直接在代码中硬编码配置值。使用环境变量或配置文件管理设置。

### 状态管理
- 对于简单应用，使用服务管理应用状态。
- 对于更复杂的应用，考虑使用Redux或NgRx等状态管理库（尽管这在后端不太常见）。
- 避免在客户端状态中存储敏感数据。在服务器上安全存储。

### 错误处理
- 实现全局异常过滤器捕获未处理的异常，并向客户端返回适当的错误响应。
- 使用自定义异常表示应用程序中的特定错误条件。
- 记录足够详细的错误以便于调试。
- 返回带有适当HTTP状态码的一致错误响应。

## 性能考虑
### 优化技术
- 使用缓存减少数据库负载并提高响应时间。NestJS使用拦截器提供内置的缓存支持。
- 通过使用索引、避免N+1查询和使用高效的数据检索方法优化数据库查询。
- 使用连接池减少建立数据库连接的开销。
- 分析应用程序以识别性能瓶颈并相应优化。

### 内存管理
- 通过正确管理资源和释放未使用的对象避免内存泄漏。
- 使用流处理大文件或数据流。
- 使用对象池重用频繁创建的对象。

### 渲染优化（服务器端渲染）
- 不直接适用于NestJS，因为它主要是一个后端框架。但是，如果使用SSR，通过缓存渲染页面和使用高效的模板引擎优化渲染性能。

### 包大小优化
- 使用树摇动（tree shaking）移除未使用的代码。
- 压缩代码以减小包大小。
- 使用代码分割仅加载每个路由或模块所需的代码。

### 懒加载
- 使用懒加载按需加载模块或功能，改善初始加载时间。
- 实现代码分割创建可独立加载的更小包。

## 安全最佳实践
### 常见漏洞
- **SQL注入**：通过使用参数化查询或自动转义用户输入的ORM防止SQL注入。
- **跨站脚本（XSS）**：通过清理用户输入和编码输出防止XSS。
- **跨站请求伪造（CSRF）**：使用令牌或其他机制实现CSRF保护。
- **认证和授权缺陷**：通过使用强密码、多因素认证和基于角色的访问控制保障认证和授权安全。
- **不安全的直接对象引用（IDOR）**：在授予访问权限前验证用户对资源的访问权限，防止IDOR。

### 输入验证
- 验证所有用户输入，防止恶意数据进入系统。使用DTO和验证管道强制执行输入约束。
- 清理用户输入，移除或转义潜在有害字符。
- 验证文件上传，防止上传恶意文件。

### 认证和授权
- 使用JWT（JSON Web Tokens）进行认证和授权。
- 实现基于角色的访问控制（RBAC），根据用户角色限制对资源的访问。
- 使用安全的密码哈希算法（如bcrypt）安全存储密码。
- 实现速率限制防止暴力攻击。

### 数据保护
- 加密静态和传输中的敏感数据。
- 使用HTTPS加密客户端和服务器之间的通信。
- 使用环境变量或秘密管理系统安全存储机密。

### 安全API通信
- 使用API密钥或OAuth 2.0进行API认证和授权。
- 实现请求验证和速率限制，保护API免受滥用。
- 使用安全API网关管理API流量并强制执行安全策略。

## 测试方法
### 单元测试
- 为单个组件（服务、控制器等）编写单元测试，验证其独立功能。
- 使用模拟和存根隔离组件与其依赖项。
- 遵循Arrange-Act-Assert模式编写清晰简洁的单元测试。

### 集成测试
- 编写集成测试验证多个组件或模块之间的交互。
- 测试应用程序与外部系统（如数据库、API）之间的集成。

### 端到端测试
- 编写端到端测试从用户角度验证应用程序功能。
- 使用Puppeteer或Cypress等工具自动化端到端测试。

### 测试组织
- 将测试组织到与应用程序目录结构相对应的单独目录中。
- 为测试文件和测试用例使用描述性名称。

### 模拟和存根
- 使用模拟框架（如Jest、Sinon.js）创建模拟对象和存根方法。
- 使用依赖注入使组件易于测试。

## 常见陷阱和注意事项
### 常见错误
- **不使用DTO进行验证**：始终使用DTO和验证管道确保数据完整性。
- **忽略环境变量**：使用环境变量进行配置，避免硬编码值。
- **不正确处理异常**：实现全局异常过滤器捕获未处理的异常并返回适当的错误响应。
- **忽视安全漏洞**：了解常见安全漏洞并采取措施减轻它们。

### 边缘情况
- **处理大文件上传**：使用流和适当的缓冲技术高效处理大文件上传。
- **处理并发请求**：使用适当的锁定机制或事务管理安全处理并发请求。

### 版本特定问题
- 了解NestJS版本之间的重大变更，并相应更新代码。
- 查阅NestJS文档获取迁移指南和兼容性信息。

### 兼容性问题
- 确保与不同Node.js版本和操作系统兼容。
- 在不同浏览器和设备上测试应用程序，确保跨平台兼容性。

### 调试策略
- 使用NestJS调试器逐步执行代码并检查变量。
- 使用日志记录跟踪执行流程并识别错误。
- 使用分析工具识别性能瓶颈。

## 工具和环境
### 推荐开发工具
- **IDE**：带有NestJS扩展的Visual Studio Code。
- **CLI**：用于生成和管理NestJS项目的Nest CLI。
- **数据库**：PostgreSQL、MySQL、MongoDB或其他兼容数据库。
- **测试**：Jest、Supertest。

### 构建配置
- 使用`tsconfig.json`配置TypeScript编译器。
- 使用Webpack或Parcel打包和优化应用程序。

### 代码检查和格式化
- 使用ESLint和Prettier强制执行代码风格和格式化规则。
- 配置预提交钩子在提交前自动检查和格式化代码。