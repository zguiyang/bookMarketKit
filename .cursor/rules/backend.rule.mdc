---
description: 
globs: apps/backend/**/*.ts
alwaysApply: false
---
# NestJS 后端开发规范

## 技术栈概览

我们的后端应用基于以下核心技术栈构建：

- **框架**：NestJS
- **数据库**：PostgreSQL
- **ORM**：Drizzle ORM
- **缓存**：Redis
- **认证**：Passport / JWT
- **验证**：Zod / class-validator
- **API文档**：Swagger/OpenAPI

## 目录结构规范

```
src/
├── common/                  # 通用功能模块
│   ├── decorator/           # 自定义装饰器
│   ├── filters/             # 全局过滤器
│   ├── guard/               # 全局守卫
│   ├── interceptors/        # 拦截器
│   │   └── transform-response.ts
│   └── pipes/               # 管道
│       └── drizzle.validation.ts
├── core/                    # 核心模块
│   ├── database/            # 数据库相关
│   ├── jwt/                 # JWT认证
│   └── redis/               # Redis配置
│       ├── redis-client.factory.ts
│       ├── redis.modules.ts
│       └── redis.service.ts
├── dto/                     # 全局DTO
│   ├── request.dto.ts
│   └── response.dto.ts
├── guards/                  # 应用级守卫
├── modules/                 # 功能模块
│   └── users/               # 用户模块示例
│       ├── dto/             # 模块专用DTO
│       │   ├── create-user.dto.ts
│       │   └── update-user.dto.ts
│       ├── entities/        # 实体定义
│       ├── users.controller.ts
│       ├── users.controller.spec.ts
│       ├── users.module.ts
│       ├── users.service.ts
│       └── users.service.spec.ts
├── shared/                  # 共享资源
├── app.controller.ts        # 主控制器
├── app.controller.spec.ts
├── app.module.ts            # 主模块
├── app.service.ts           # 主服务
└── main.ts                  # 应用入口点
```

## 组件创建规则

1. **必须使用NestJS CLI创建组件**，不要手动创建文件：
   ```bash
   # 创建模块
   nest g module users
   
   # 创建控制器
   nest g controller users
   
   # 创建服务
   nest g service users
   
   # 创建资源(包含CRUD)
   nest g resource products
   ```

2. **文件命名**：
   - 使用kebab-case（烤肉串命名法）
   - 格式：`feature.type.ts`（例如：user.controller.ts）

3. **类命名**：
   - 使用PascalCase（大驼峰命名法）
   - 格式：`FeatureType`（例如：UserController）

## 模块组织原则

1. **职责分离**：
   - Controller处理HTTP请求和响应
   - Service包含业务逻辑
   - Module组织和连接组件

2. **依赖注入**：
   - 正确使用@Injectable()装饰器
   - 在module中正确注册providers

3. **避免手动创建实例**：
   - 使用依赖注入而不是new关键字创建服务实例

4. **模块结构**：
   - 每个功能模块应包含自己的dto、entities目录
   - 相关的测试文件应与源文件放在同一目录

## 数据库与ORM规范

### Drizzle ORM使用规范

1. **Schema定义**：
   - 数据库schema定义放在`db/schemas`目录下
   - 每个表对应一个单独的schema文件（如`user.schema.ts`）

2. **命名规范**：
   - 表名使用复数形式（例如：`users`, `products`）
   - 字段名使用蛇形命名法（例如：`created_at`, `user_id`）
   - 主键统一命名为 `id`
   - 外键命名格式为 `<表名单数>_id`（例如：`user_id`, `product_id`）

3. **索引规范**：
   - 外键字段必须创建索引
   - 经常用于查询条件的字段应创建索引
   - 索引命名格式：`idx_<表名>_<字段名>`

4. **字段设计**：
   - 所有表必须包含 `created_at` 和 `updated_at` 时间戳字段
   - 使用软删除策略，添加 `deleted_at` 字段而非直接删除数据
   - 枚举值使用 PostgreSQL 的 `ENUM` 类型

### 数据验证与转换

1. **使用Pipes进行验证**：
   - 使用`drizzle.validation.ts`中的自定义管道进行数据验证
   - 为每个DTO定义明确的验证规则

2. **DTO组织**：
   - 全局DTO放在`src/dto`目录下
   - 模块特定DTO放在对应模块的`dto`目录下
   - 遵循`create-entity.dto.ts`和`update-entity.dto.ts`命名模式

## Redis缓存规范

1. **Redis模块组织**：
   - 使用`redis.module.ts`注册Redis服务
   - 使用`redis-client.factory.ts`创建Redis客户端
   - 通过`redis.service.ts`提供Redis操作接口

2. **缓存策略**：
   - 对频繁访问但不常变化的数据使用缓存
   - 设置适当的缓存过期时间
   - 实现缓存失效机制

## 拦截器与响应处理

1. **响应转换**：
   - 使用`transform-response.ts`拦截器统一处理响应格式
   - 确保所有API返回一致的响应结构

2. **错误处理**：
   - 使用全局异常过滤器处理异常
   - 返回标准化的错误响应

## 测试规范

1. **测试文件组织**：
   - 单元测试文件与源文件放在同一目录
   - 使用`.spec.ts`后缀命名测试文件

2. **测试覆盖率要求**：
   - 控制器和服务的测试覆盖率应达到80%以上
   - 关键业务逻辑应有完整的测试用例

## 安全最佳实践

1. **认证与授权**：
   - 使用JWT进行认证
   - 实现基于角色的访问控制
   - 使用守卫保护敏感路由

2. **数据保护**：
   - 敏感数据加密存储
   - 使用HTTPS加密传输
   - 避免在日志中记录敏感信息

## 性能优化

1. **缓存策略**：
   - 合理使用Redis缓存减少数据库负载
   - 实现缓存预热和定期刷新机制

2. **数据库优化**：
   - 优化查询，避免N+1问题
   - 为常用查询创建适当的索引
   - 使用数据库连接池